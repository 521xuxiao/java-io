// 下载文件（excel）查询数据放在表格里面
    @ResponseBody
    @RequestMapping("/downloadWasherChargrBusiness")
     public ReturnData downloadWasherChargrBusiness(HttpServletRequest request, HttpServletResponse response) {
        Map<String,Object> paramMap = getRequestParameterMapStr(request);
        ReturnData returnData = new ReturnData();
        try {
            List<Map<String, Object>> list = businessService.selectBusiness(paramMap);
            String[] itemlist= {"客户简称","联系人","物业类型","合作模式","联系方式","大客户地址"};
            if(!list.isEmpty()) {
                boolean flag = downloadWasherChargrBusiness(itemlist,list,response);
                if(flag) {
                    Map<String,Object> map1 = new HashMap<>();
                    map1.put("result", "success");
                    returnData.setResult(map1);
                    return null;
                }
            }else {
                returnData.setSuccess(false);
                returnData.setResultMessage("暂无数据");
                return returnData;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Map<String,Object> map1 = new HashMap<>();
            map1.put("result", "success");
            returnData.setResult(map1);
            return returnData;
        }
        return returnData;
    }

    public boolean downloadWasherChargrBusiness(String[] items,List<Map<String,Object>> list,HttpServletResponse response) throws Exception {
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("专题信息");
        sheet.setDefaultColumnWidth(15);
        XSSFRow row = sheet.createRow(0);
        //XSSFCell cell = row.createCell(0);
        for(int i=0;i<items.length;i++) {
            XSSFCell cell = row.createCell(i);
            cell.setCellValue(items[i]);
        }
        String[] itemlist= {"客户简称","联系人","物业类型","合作模式","联系方式","大客户地址"};
        for(int i = 0;i<list.size();i++) {
            Map<String, Object> datamap = list.get(i);
            sheet.setColumnWidth(1, 15 * 256);
            XSSFRow row1 = sheet.createRow(i + 1);
            XSSFCell cell2 = row1.createCell(0);
            cell2.setCellValue(datamap.get("busi_addreviation").toString());
            XSSFCell cell3 = row1.createCell(1);
            cell3.setCellValue(datamap.get("busi_contacts").toString());
            XSSFCell cell4 = row1.createCell(2);
            cell4.setCellValue(datamap.get("propertyType").toString());
            XSSFCell cell5 = row1.createCell(3);
            cell5.setCellValue(datamap.get("type").toString());
            XSSFCell cell6 = row1.createCell(4);
            cell6.setCellValue(datamap.get("busi_phone").toString());
            XSSFCell cell7 = row1.createCell(5);
            cell7.setCellValue(datamap.get("busi_address").toString());
        }
        response.setContentType("application/x-download");
        response.setCharacterEncoding("UTF-8");
        String filename = "";
        filename = URLEncoder.encode("大客户列表.xls","UTF-8");
        response.addHeader("Content-Disposition", "attachment;filename=" + filename);
        OutputStream out = response.getOutputStream();
        workbook.write(out);
        out.close();
        return true;
    }


/**
     * 测试上传文件excel,读取里面的数据插入到数据库里面
     */
    @PostMapping("/uploadExcel")
    public ReturnData readExcel(MultipartFile file) throws IOException {
        if (file == null) {
            throw new RuntimeException("文件不存在！");
        }
        String fileName = file.getOriginalFilename();
        //判断文件是否是excel文件
        if (!fileName.endsWith("xls") && !fileName.endsWith("xlsx")) {
            throw new RuntimeException(fileName + "不是excel文件");
        }
        //创建Workbook工作薄对象，表示整个excel
        Workbook workbook = null;
        try {
            InputStream is = file.getInputStream();
            if (fileName.endsWith("xls")) {
                workbook = new HSSFWorkbook(is);
            } else if (fileName.endsWith("xlsx")) {
                workbook = new XSSFWorkbook(is);
            }
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("IO流异常");
        }


        List<Map<String, Object>> list = new ArrayList<>();
        if (workbook != null) {
            for (int sheetNum = 0; sheetNum < workbook.getNumberOfSheets(); sheetNum++) {
                //获得当前sheet工作表
                Sheet sheet = workbook.getSheetAt(sheetNum);
                if (sheet == null) {
                    continue;
                }
                //获得当前sheet的开始行
                int firstRowNum = sheet.getFirstRowNum()+1;
                //获得当前sheet的结束行
                int lastRowNum = sheet.getLastRowNum();
                //循环所有行
                for (int rowNum = firstRowNum; rowNum <= lastRowNum; rowNum++) {
                    //获得当前行
                    Row row = sheet.getRow(rowNum);
                    if (row == null) {
                        continue;
                    }
                    String id = getCellValue(row.getCell(0));
                    String phone = getCellValue(row.getCell(1));
                    Map<String, Object> map = new HashMap<>();
                    map.put("id", id);
                    map.put("phone", phone);
                    list.add(map);
                }
            }
            workbook.close();
        }
        toyService.uploadExcel(list);
        return new ReturnData("上传成功");
    }
    public String getCellValue(Cell cell) {
        String cellValue = "";
        if (cell == null) {
            return cellValue;
        }
        //如果当前单元格内容为日期类型，需要特殊处理
        String dataFormatString = cell.getCellStyle().getDataFormatString();
        if (dataFormatString.equals("m/d/yy")) {
            cellValue = new SimpleDateFormat("DATE_FORMAT").format(cell.getDateCellValue());
            return cellValue;
        }
        //把数字当成String来读，避免出现1读成1.0的情况
        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
            cell.setCellType(Cell.CELL_TYPE_STRING);
        }
        //判断数据的类型
        switch (cell.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC: //数字
                cellValue = String.valueOf(cell.getNumericCellValue());
                break;
            case Cell.CELL_TYPE_STRING: //字符串
                cellValue = String.valueOf(cell.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN: //Boolean
                cellValue = String.valueOf(cell.getBooleanCellValue());
                break;
            case Cell.CELL_TYPE_FORMULA: //公式
                cellValue = String.valueOf(cell.getCellFormula());
                break;
            case Cell.CELL_TYPE_BLANK: //空值
                cellValue = "";
                break;
            case Cell.CELL_TYPE_ERROR: //故障
                cellValue = "非法字符";
                break;
            default:
                cellValue = "未知类型";
                break;
        }
        return cellValue;
    }



//上传图片
  @RequestMapping(value="/uploadPicture")
  @ResponseBody
  public ReturnData uploadPicture(MultipartFile  file,HttpServletRequest request) {
   ReturnData returndata = new ReturnData();
   if(file.isEmpty()) {
    returndata.setSuccess(false);
    returndata.setResultMessage("文件为空");
    return returndata;
   }
   String originalname = file.getOriginalFilename();
   String suffixname = originalname.substring(originalname.lastIndexOf("."));
   String path = "C:/repair/";
   UUID id = UUID.randomUUID();
   String filename = id+suffixname;
   String fullpath = path+filename;
   String requestpath = request.getContextPath();
   String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + requestpath;
   File dest = new File(fullpath);
   if (!dest.getParentFile().exists()) {
             dest.getParentFile().mkdirs();
         }
   try {
       file.transferTo(dest);
       String filepath = basePath+"/BMPlatServers/repair/"+filename;
    Map<String,Object> map = new HashMap<>();
    map.put("filename", filename);
    map.put("filepath", filepath);
    map.put("oldname", originalname);
    returndata.setResult(map);
       returndata.setSuccess(true);
       returndata.setResultMessage("success");
      } catch (IOException e) {
          e.printStackTrace();
          returndata.setSuccess(false);
       returndata.setResultMessage("系统异常");
      }
      return returndata;
  }

// 删除图片
//删除图片
  @RequestMapping(value="/deletePicture")
  @ResponseBody
  public  ReturnData deletePicture(HttpServletRequest request,HttpServletResponse response) {
   ReturnData returndata = new ReturnData();
   Map<String,Object> map = getRequestParameterMapStr(request);
   try {
    String filename = map.get("filename").toString();
    String fullpath = "C:/repair/"+filename;
    File file = new File(fullpath);
    if(file.delete()) {
     returndata.setSuccess(true);
     returndata.setResultMessage("删除成功");
    }else {
     returndata.setSuccess(false);
     returndata.setResultMessage("删除失败");
    }
   }catch(Exception e) {
    e.printStackTrace();
    returndata.setSuccess(false);
    returndata.setResultMessage("系统异常");
   }
   return returndata;
  }